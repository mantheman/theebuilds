--- video_device.c.original	2009-02-02 16:34:08.000000000 +0800
+++ video_device.c	2009-02-02 16:32:10.000000000 +0800
@@ -26,7 +26,7 @@
 #include <media/v4l2-ioctl.h>
 #endif
 
-/*#define DEBUG*/
+//#define DEBUG
 
 #define KERNEL_PREFIX "AVLD device: " /* Prefix of each kernel message */
 #define VID_DUMMY_DEVICE 0 /* The type of device we create */
@@ -456,14 +456,51 @@
 		printk(KERNEL_PREFIX "entering v4l_read()\n");
 	#endif
 	
+	int waiting_time;
+	struct timeval current_time;
 	
 	// if input size superior to the buffered image size
 	if (count > BUFFER_SIZE) {
 		printk(KERNEL_PREFIX "ERROR : you are attempting to read too much data : %d/%lu\n",count,BUFFER_SIZE);
 		return -EINVAL;
 	}
-	memcpy(buf,image,count*sizeof(char));
-	
+	copy_to_user(buf,image,count*sizeof(char));
+
+	// Wait to simulate FPS	if necessary
+	#ifdef DEBUG
+		printk(KERNEL_PREFIX "waiting v4l_read() : %d - %ld\n",count,BUFFER_SIZE);
+	#endif
+	if ( fps > 0 ) {		
+		do_gettimeofday(&current_time);
+		//printk(KERNEL_PREFIX "t2=%d.%d - t1=%d.%d\n",current_time.tv_sec,current_time.tv_usec,timer.tv_sec,timer.tv_usec);
+
+		// Compute waiting_time
+		waiting_time = HZ/fps - HZ*( (current_time.tv_sec-timer.tv_sec)*USEC_PER_SEC  +  (current_time.tv_usec-timer.tv_usec)  )/USEC_PER_SEC;
+		//waiting_time = MSEC_PER_SEC/fps - ( (current_time.tv_sec-timer.tv_sec)*MSEC_PER_SEC  +  (current_time.tv_usec-timer.tv_usec)/USEC_PER_MSEC  );
+
+		// waits
+		if (waiting_time > 0) {
+			// solution 1
+			interruptible_sleep_on_timeout (&wait,waiting_time);
+
+			// solution 2
+			//set_current_state(TASK_INTERRUPTIBLE);
+			//schedule_timeout(waiting_time);
+			
+			// solution 3
+			//msleep_interruptible(waiting_time);
+		}
+
+		do_gettimeofday(&timer);
+	}
+	// Wait reader before continue
+	else if ( fps < 0 ) {
+		#ifdef DEBUG
+			printk (KERN_INFO "fps value : %d\n",fps);
+		#endif
+		mutex_lock_interruptible(&lock);
+	}
+
 	#ifdef DEBUG
 		printk(KERNEL_PREFIX "leaving v4l_read() : %d - %ld\n",count,BUFFER_SIZE);
 	#endif
