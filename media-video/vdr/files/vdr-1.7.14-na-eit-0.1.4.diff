diff -Nur vdr-1.7.14.orig/channels.c vdr-1.7.14/channels.c
--- vdr-1.7.14.orig/channels.c	2010-02-21 08:36:04.000000000 -0500
+++ vdr-1.7.14/channels.c	2010-03-28 12:57:06.000000000 -0400
@@ -842,6 +842,20 @@
      }
   return NULL;
 }
+
+cChannel *cChannels::GetByChannelID(int nid, int tid, int sid)
+{
+  cList<cHashObject> *list = channelsHashSid.GetList(sid);
+  if (list) {
+     for (cHashObject *hobj = list->First(); hobj; hobj = list->Next(hobj)) {
+         cChannel *channel = (cChannel *)hobj->Object();
+         if (channel->Sid() == sid && channel->Tid() == tid && channel->Nid() == nid)
+            return channel;
+         }
+     }
+  return NULL;
+}
+
 cChannel *cChannels::GetByTransponderID(tChannelID ChannelID)
 {
   int source = ChannelID.Source();
diff -Nur vdr-1.7.14.orig/channels.h vdr-1.7.14/channels.h
--- vdr-1.7.14.orig/channels.h	2010-03-07 08:47:13.000000000 -0500
+++ vdr-1.7.14/channels.h	2010-03-28 12:57:06.000000000 -0400
@@ -213,6 +213,7 @@
   cChannel *GetByNumber(int Number, int SkipGap = 0);
   cChannel *GetByServiceID(int Source, int Transponder, unsigned short ServiceID);
   cChannel *GetByChannelID(tChannelID ChannelID, bool TryWithoutRid = false, bool TryWithoutPolarization = false);
+  cChannel *GetByChannelID(int nid, int tid, int sid);
   cChannel *GetByTransponderID(tChannelID ChannelID);
   int BeingEdited(void) { return beingEdited; }
   void IncBeingEdited(void) { beingEdited++; }
diff -Nur vdr-1.7.14.orig/eit.c vdr-1.7.14/eit.c
--- vdr-1.7.14.orig/eit.c	2010-01-08 10:17:09.000000000 -0500
+++ vdr-1.7.14/eit.c	2010-03-28 12:57:06.000000000 -0400
@@ -16,6 +16,7 @@
 #include "i18n.h"
 #include "libsi/section.h"
 #include "libsi/descriptor.h"
+#include "libsi/dish.h"
 
 #define VALID_TIME (31536000 * 2) // two years
 
@@ -32,8 +33,7 @@
   if (!CheckCRCAndParse())
      return;
 
-  tChannelID channelID(Source, getOriginalNetworkId(), getTransportStreamId(), getServiceId());
-  cChannel *channel = Channels.GetByChannelID(channelID, true);
+  cChannel *channel = Channels.GetByChannelID(getOriginalNetworkId(), getTransportStreamId(), getServiceId());
   if (!channel)
      return; // only collect data for known channels
 
@@ -119,6 +119,8 @@
       int LanguagePreferenceExt = -1;
       bool UseExtendedEventDescriptor = false;
       SI::Descriptor *d;
+      SI::DishDescriptor *DishExtendedEventDescriptor = NULL;
+      SI::DishDescriptor *DishShortEventDescriptor = NULL;
       SI::ExtendedEventDescriptors *ExtendedEventDescriptors = NULL;
       SI::ShortEventDescriptor *ShortEventDescriptor = NULL;
       cLinkChannels *LinkChannels = NULL;
@@ -144,6 +146,26 @@
                     UseExtendedEventDescriptor = false;
                  }
                  break;
+            case SI::DishExtendedEventDescriptorTag: {
+                 SI::DishDescriptor *deed = (SI::DishDescriptor *)d;
+                 deed->Decompress(Tid);
+                 if (!DishExtendedEventDescriptor) {
+                    DishExtendedEventDescriptor = deed;
+                    d = NULL; // so that it is not deleted
+                    }
+                 HasExternalData = true; 
+                 }
+                 break;
+            case SI::DishShortEventDescriptorTag: {
+                 SI::DishDescriptor *dsed = (SI::DishDescriptor *)d;
+                 dsed->Decompress(Tid);
+                 if (!DishShortEventDescriptor) {
+                   DishShortEventDescriptor = dsed;
+                   d = NULL; // so that it is not deleted
+                   }
+                 HasExternalData = true;
+                 }
+                 break;
             case SI::ShortEventDescriptorTag: {
                  SI::ShortEventDescriptor *sed = (SI::ShortEventDescriptor *)d;
                  if (I18nIsPreferredLanguage(Setup.EPGLanguages, sed->languageCode, LanguagePreferenceShort) || !ShortEventDescriptor) {
@@ -167,6 +189,7 @@
                  pEvent->SetContents(Contents);
                  }
                  break;
+/*
             case SI::ParentalRatingDescriptorTag: {
                  int LanguagePreferenceRating = -1;
                  SI::ParentalRatingDescriptor *prd = (SI::ParentalRatingDescriptor *)d;
@@ -188,6 +211,17 @@
                      }
                  }
                  break;
+*/
+            case SI::DishRatingDescriptorTag:
+                 if (d->getLength() == 4) {
+                    uint16_t rating = d->getData().TwoBytes(2);
+                    uint16_t newRating = (rating >> 10) & 0x07;
+                    if (newRating == 0) newRating = 5;
+                    if (newRating == 6) newRating = 0;
+                    pEvent->SetParentalRating((newRating << 10) | (rating & 0x3FF));
+                    pEvent->SetStarRating((rating >> 13) & 0x07);
+                    }
+                 break;                  
             case SI::PDCDescriptorTag: {
                  SI::PDCDescriptor *pd = (SI::PDCDescriptor *)d;
                  t.tm_isdst = -1; // makes sure mktime() will determine the correct DST setting
@@ -271,6 +305,13 @@
           }
 
       if (!rEvent) {
+         if (DishShortEventDescriptor) {
+            pEvent->SetTitle(DishShortEventDescriptor->getText());
+            }
+         if (DishExtendedEventDescriptor) {
+            pEvent->SetDescription(DishExtendedEventDescriptor->getText());
+            pEvent->SetShortText(DishExtendedEventDescriptor->getShortText());
+            }
          if (ShortEventDescriptor) {
             char buffer[Utf8BufSize(256)];
             pEvent->SetTitle(ShortEventDescriptor->name.getText(buffer, sizeof(buffer)));
@@ -287,6 +328,8 @@
          else if (!HasExternalData)
             pEvent->SetDescription(NULL);
          }
+      delete DishExtendedEventDescriptor;
+      delete DishShortEventDescriptor;
       delete ExtendedEventDescriptors;
       delete ShortEventDescriptor;
 
@@ -355,7 +398,9 @@
 
 cEitFilter::cEitFilter(void)
 {
-  Set(0x12, 0x40, 0xC0);  // event info now&next actual/other TS (0x4E/0x4F), future actual/other TS (0x5X/0x6X)
+  Set(0x12, 0x00, 0x00);
+  Set(0x0300, 0x00, 0x00); // Dish Network EEPG
+  Set(0x0441, 0x00, 0x00); // Bell ExpressVU EEPG 
   if (Setup.SetSystemTime && Setup.TimeTransponder)
      Set(0x14, 0x70);     // TDT
 }
@@ -374,8 +419,10 @@
         return;
      }
   switch (Pid) {
+    case 0x0300:
+    case 0x0441:
     case 0x12: {
-         if (Tid >= 0x4E && Tid <= 0x6F) {
+         if (Tid >= 0x4E) {
             cSchedulesLock SchedulesLock(true, 10);
             cSchedules *Schedules = (cSchedules *)cSchedules::Schedules(SchedulesLock);
             if (Schedules)
diff -Nur vdr-1.7.14.orig/epg.c vdr-1.7.14/epg.c
--- vdr-1.7.14.orig/epg.c	2010-02-28 09:24:55.000000000 -0500
+++ vdr-1.7.14/epg.c	2010-04-01 21:54:51.000000000 -0400
@@ -114,6 +114,7 @@
   components = NULL;
   memset(contents, 0, sizeof(contents));
   parentalRating = 0;
+  starRating = 0;
   startTime = 0;
   duration = 0;
   vps = 0;
@@ -384,6 +385,20 @@
            default: ;
            }
          break;
+    case ecgUserDefined:
+         switch (Content & 0x0F) {
+           //case 0x00: return tr("Content$"); // ???
+           case 0x01: return tr("Content$Movie");
+           case 0x02: return tr("Content$Sports");
+           case 0x03: return tr("Content$News");
+           case 0x04: return tr("Content$Children");
+           case 0x05: return tr("Content$Education");
+           case 0x06: return tr("Content$Series");
+           case 0x07: return tr("Content$Music");
+           case 0x08: return tr("Content$Religious");
+           default: ;
+           }
+         break;   
     default: ;
     }
   return "";
@@ -391,9 +406,31 @@
 
 cString cEvent::GetParentalRatingString(void) const
 {
-  if (parentalRating)
-     return cString::sprintf(tr("ParentalRating$from %d"), parentalRating);
-  return NULL;
+  static const char *const ratings[8] =  { "", "G", "PG", "PG-13", "R", "NR/AO", "", "NC-17" };
+  char buffer[19];
+  buffer[0] = 0;
+  strcpy(buffer, ratings[(parentalRating >> 10) & 0x07]);
+  if (parentalRating & 0x37F) {
+     strcat(buffer, " [");
+     if (parentalRating & 0x0230)
+        strcat(buffer, "V,");
+     if (parentalRating & 0x000A)
+        strcat(buffer, "L,");
+     if (parentalRating & 0x0044)
+        strcat(buffer, "N,");
+     if (parentalRating & 0x0101)
+        strcat(buffer, "SC,");
+     if (char *s = strrchr(buffer, ','))
+        s[0] = ']';    
+     }
+
+  return isempty(buffer) ? NULL : buffer;
+}
+
+cString cEvent::GetStarRatingString(void) const
+{
+  static const char *const critiques[8] = { "", "*", "*+", "**", "**+", "***", "***+", "****" };
+  return critiques[starRating & 0x07];
 }
 
 cString cEvent::GetDateString(void) const
@@ -438,8 +475,8 @@
             fprintf(f, " %02X", Contents(i));
         fprintf(f, "\n");
         }
-     if (parentalRating)
-        fprintf(f, "%sR %d\n", Prefix, parentalRating);
+     if (parentalRating || starRating)
+        fprintf(f, "%sR %d %d\n", Prefix, parentalRating, starRating);
      if (components) {
         for (int i = 0; i < components->NumComponents(); i++) {
             tComponent *p = components->Component(i);
@@ -478,7 +515,13 @@
                     }
               }
               break;
-    case 'R': SetParentalRating(atoi(t));
+    case 'R': {
+                int ParentalRating = 0;
+                int StarRating = 0;
+                sscanf(t, "%d %d", &ParentalRating, &StarRating);
+                SetParentalRating(ParentalRating);
+                SetStarRating(StarRating);
+              }
               break;
     case 'X': if (!components)
                  components = new cComponents;
@@ -1230,7 +1273,7 @@
 
 cSchedule *cSchedules::AddSchedule(tChannelID ChannelID)
 {
-  ChannelID.ClrRid();
+  //ChannelID.ClrRid();
   cSchedule *p = (cSchedule *)GetSchedule(ChannelID);
   if (!p) {
      p = new cSchedule(ChannelID);
@@ -1244,7 +1287,7 @@
 
 const cSchedule *cSchedules::GetSchedule(tChannelID ChannelID) const
 {
-  ChannelID.ClrRid();
+  //ChannelID.ClrRid();
   for (cSchedule *p = First(); p; p = Next(p)) {
       if (p->ChannelID() == ChannelID)
          return p;
diff -Nur vdr-1.7.14.orig/epg.h vdr-1.7.14/epg.h
--- vdr-1.7.14.orig/epg.h	2010-01-08 10:20:34.000000000 -0500
+++ vdr-1.7.14/epg.h	2010-03-28 12:57:06.000000000 -0400
@@ -18,6 +18,7 @@
 #include "tools.h"
 
 #define MAXEPGBUGFIXLEVEL 3
+#define VDR_RATINGS_PATCHED_V2
 
 enum { MaxEventContents = 4 };
 
@@ -76,7 +77,8 @@
   uchar tableID;           // Table ID this event came from
   uchar version;           // Version number of section this event came from
   uchar runningStatus;     // 0=undefined, 1=not running, 2=starts in a few seconds, 3=pausing, 4=running
-  uchar parentalRating;    // Parental rating of this event
+  uint16_t parentalRating; // Parental rating of this event
+  uint8_t starRating;      // Dish/BEV star rating
   char *title;             // Title of this event
   char *shortText;         // Short description of this event (typically the episode name in case of a series)
   char *description;       // Description of this event
@@ -102,6 +104,7 @@
   const cComponents *Components(void) const { return components; }
   uchar Contents(int i = 0) const { return (0 <= i && i < MaxEventContents) ? contents[i] : 0; }
   int ParentalRating(void) const { return parentalRating; }
+  uint8_t StarRating(void) const { return starRating; }
   time_t StartTime(void) const { return startTime; }
   time_t EndTime(void) const { return startTime + duration; }
   int Duration(void) const { return duration; }
@@ -112,6 +115,7 @@
   bool IsRunning(bool OrAboutToStart = false) const;
   static const char *ContentToString(uchar Content);
   cString GetParentalRatingString(void) const;
+  cString GetStarRatingString(void) const;
   cString GetDateString(void) const;
   cString GetTimeString(void) const;
   cString GetEndTimeString(void) const;
@@ -126,6 +130,7 @@
   void SetComponents(cComponents *Components); // Will take ownership of Components!
   void SetContents(uchar *Contents);
   void SetParentalRating(int ParentalRating);
+  void SetStarRating(uint8_t StarRating) { starRating = StarRating; }
   void SetStartTime(time_t StartTime);
   void SetDuration(int Duration);
   void SetVps(time_t Vps);
diff -Nur vdr-1.7.14.orig/libsi/dish.c vdr-1.7.14/libsi/dish.c
--- vdr-1.7.14.orig/libsi/dish.c	1969-12-31 19:00:00.000000000 -0500
+++ vdr-1.7.14/libsi/dish.c	2010-03-28 12:57:06.000000000 -0400
@@ -0,0 +1,257 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *                                                                         *
+ *   These routines decompress Huffman coded Dish Network EIT data.        *
+ *   The implementation is based on the algorithm presentend in            *
+ *                                                                         *
+ *     "A memory-efficient Huffman decoding algorithm"                     *
+ *     Pi-Chung Wang, Yuan-Rung Yang, Chun-Liang Lee, Hung-Yi Chang        *
+ *     Proceedings of the 19th International Conference on Advanced        *
+ *     Information Networking and Applications (AINA'05)                   *
+ *                                                                         *
+ ***************************************************************************/ 
+
+#include "dish.h"
+
+#include <string.h>
+#include <stdlib.h>
+
+namespace SI {
+
+// returns the value of a sequence of bits in the byte array
+static unsigned int getBits(int bitIndex, int bitCount, const unsigned char *byteptr, int length)
+{
+   union {
+      unsigned char b[4];
+      unsigned long val;
+   } chunk;
+
+   int offset = bitIndex >> 3;
+   int bitnum = bitIndex - (offset << 3);
+   int rightend = 32 - bitnum - bitCount;   
+   
+   chunk.b[3] = byteptr[offset];
+   chunk.b[2] = (offset+1 < length) ? byteptr[offset+1] : 0;
+   chunk.b[1] = (offset+2 < length) ? byteptr[offset+2] : 0;
+   chunk.b[0] = 0; // Never need to look this far ahead.
+
+   return (unsigned int)((chunk.val & (0xFFFFFFFF >> bitnum)) >> rightend);
+}
+
+DishDescriptor::DishDescriptor(void)
+{
+   text = NULL;
+   shortText = NULL;
+   decompressed = NULL;
+}
+
+DishDescriptor::~DishDescriptor()
+{
+   free(decompressed);
+}
+
+void DishDescriptor::Decompress(unsigned char Tid)
+{
+   const unsigned char *str = data.getData();   
+   const unsigned char *cmp = NULL; // Compressed data
+   int length = 0;  // Length of compressed data
+   unsigned int dLength = 0; // Length of decompressed data
+   
+   if ((str[3] & 0xF8) == 0x80) {
+      length = str[1] - 2;
+      dLength = (str[2]&0x40) ? ((str[3] << 6)&0xFF) | (str[2]&0x3F) : str[2]&0x3F;
+      cmp = str + 4;
+   }
+   else {
+      length = str[1] - 1;
+      dLength = str[2] & 0x7F;
+      cmp = str + 3;
+   }
+  
+   if (length <= 0 || !dLength)
+     return;
+
+   decompressed = (unsigned char*)malloc(dLength+1);
+   
+   HuffmanTable *table;
+   unsigned int tableSize, numBits;
+   
+   if (Tid > 0x80) {
+      table = Table255;
+      tableSize = SIZE_TABLE_255;
+      numBits = 13;  
+   }
+   else {
+      table = Table128;
+      tableSize = SIZE_TABLE_128;
+      numBits = 11;
+   }
+
+   unsigned int bLength = length << 3; // number of bits
+   unsigned int currentBit = 0, count = 0;
+   while (currentBit < bLength - 1 && count < dLength) {
+      // Find the interval containing the sequence of length numBits starting
+      // at currentBit. The corresponding character will  be the one encoded
+      // at the begin of the sequence.
+      unsigned int code = getBits(currentBit, numBits, cmp, length); 
+      // We could use a binary search, but in practice this linear search is faster.
+      unsigned int index = 0;
+      while (table[index].startingAddress <= code && index < tableSize) { index++; }
+      index--;
+      decompressed[count++] = table[index].character;
+      currentBit += table[index].numberOfBits;
+   }
+   decompressed[count] = 0;
+   
+   char* split = strchr((char*)decompressed, 0x0D); // Look for carriage return
+   if (split) {
+      *split = 0;
+      shortText = (char*) decompressed;
+      text = (split[1]==0x20) ? split+2 : split+1;
+   }
+   else {
+      text = (char*) decompressed;
+   }
+}
+
+
+struct DishDescriptor::HuffmanTable DishDescriptor::Table128[SIZE_TABLE_128] = {
+   { 0x0000, 0x20, 0x03 }, { 0x0100, 0x65, 0x04 }, { 0x0180, 0x74, 0x04 }, 
+   { 0x0200, 0x61, 0x04 }, { 0x0280, 0x6F, 0x04 }, { 0x0300, 0x73, 0x04 }, 
+   { 0x0380, 0x6E, 0x04 }, { 0x0400, 0x72, 0x06 }, { 0x0420, 0x69, 0x06 }, 
+   { 0x0440, 0x6C, 0x06 }, { 0x0460, 0x63, 0x06 }, { 0x0480, 0x68, 0x06 }, 
+   { 0x04A0, 0x75, 0x06 }, { 0x04C0, 0x64, 0x06 }, { 0x04E0, 0x70, 0x06 }, 
+   { 0x0500, 0x6D, 0x06 }, { 0x0520, 0x67, 0x06 }, { 0x0540, 0x79, 0x06 }, 
+   { 0x0560, 0x76, 0x06 }, { 0x0580, 0x0A, 0x06 }, { 0x05A0, 0x2E, 0x06 }, 
+   { 0x05C0, 0x77, 0x06 }, { 0x05E0, 0x66, 0x06 }, { 0x0600, 0x53, 0x07 }, 
+   { 0x0610, 0x62, 0x07 }, { 0x0620, 0x54, 0x07 }, { 0x0630, 0x22, 0x07 }, 
+   { 0x0640, 0x6B, 0x07 }, { 0x0650, 0x50, 0x07 }, { 0x0660, 0x41, 0x07 }, 
+   { 0x0670, 0x43, 0x07 }, { 0x0680, 0x44, 0x07 }, { 0x0690, 0x4C, 0x07 }, 
+   { 0x06A0, 0x4D, 0x07 }, { 0x06B0, 0x49, 0x07 }, { 0x06C0, 0x4E, 0x07 }, 
+   { 0x06D0, 0x3A, 0x07 }, { 0x06E0, 0x52, 0x07 }, { 0x06F0, 0x2C, 0x07 }, 
+   { 0x0700, 0x45, 0x08 }, { 0x0708, 0x55, 0x08 }, { 0x0710, 0x46, 0x08 }, 
+   { 0x0718, 0x48, 0x08 }, { 0x0720, 0x59, 0x08 }, { 0x0728, 0x56, 0x08 }, 
+   { 0x0730, 0x2D, 0x08 }, { 0x0738, 0x7A, 0x08 }, { 0x0740, 0x78, 0x08 }, 
+   { 0x0748, 0x2F, 0x08 }, { 0x0750, 0x4F, 0x08 }, { 0x0758, 0x3F, 0x08 }, 
+   { 0x0760, 0x57, 0x08 }, { 0x0768, 0x47, 0x08 }, { 0x0770, 0x42, 0x08 }, 
+   { 0x0778, 0x33, 0x08 }, { 0x0780, 0x31, 0x09 }, { 0x0784, 0x71, 0x09 }, 
+   { 0x0788, 0x30, 0x09 }, { 0x078C, 0x21, 0x09 }, { 0x0790, 0x6A, 0x09 }, 
+   { 0x0794, 0x5A, 0x09 }, { 0x0798, 0x39, 0x09 }, { 0x079C, 0x34, 0x09 }, 
+   { 0x07A0, 0x4B, 0x09 }, { 0x07A4, 0x2A, 0x09 }, { 0x07A8, 0x37, 0x09 }, 
+   { 0x07AC, 0x36, 0x09 }, { 0x07B0, 0x35, 0x09 }, { 0x07B4, 0x4A, 0x09 }, 
+   { 0x07B8, 0x38, 0x09 }, { 0x07BC, 0x29, 0x09 }, { 0x07C0, 0x28, 0x0A }, 
+   { 0x07C2, 0x58, 0x0A }, { 0x07C4, 0x51, 0x0A }, { 0x07C6, 0x3C, 0x0A }, 
+   { 0x07C8, 0x32, 0x0A }, { 0x07CA, 0x27, 0x0A }, { 0x07CC, 0x26, 0x0A }, 
+   { 0x07CE, 0x7F, 0x0B }, { 0x07CF, 0x7E, 0x0B }, { 0x07D0, 0x7D, 0x0B }, 
+   { 0x07D1, 0x7C, 0x0B }, { 0x07D2, 0x7B, 0x0B }, { 0x07D3, 0x60, 0x0B }, 
+   { 0x07D4, 0x5F, 0x0B }, { 0x07D5, 0x5E, 0x0B }, { 0x07D6, 0x5D, 0x0B }, 
+   { 0x07D7, 0x5C, 0x0B }, { 0x07D8, 0x5B, 0x0B }, { 0x07D9, 0x40, 0x0B }, 
+   { 0x07DA, 0x3E, 0x0B }, { 0x07DB, 0x3D, 0x0B }, { 0x07DC, 0x3B, 0x0B }, 
+   { 0x07DD, 0x2B, 0x0B }, { 0x07DE, 0x25, 0x0B }, { 0x07DF, 0x24, 0x0B }, 
+   { 0x07E0, 0x23, 0x0B }, { 0x07E1, 0x1F, 0x0B }, { 0x07E2, 0x1E, 0x0B }, 
+   { 0x07E3, 0x1D, 0x0B }, { 0x07E4, 0x1C, 0x0B }, { 0x07E5, 0x1B, 0x0B }, 
+   { 0x07E6, 0x1A, 0x0B }, { 0x07E7, 0x19, 0x0B }, { 0x07E8, 0x18, 0x0B }, 
+   { 0x07E9, 0x17, 0x0B }, { 0x07EA, 0x16, 0x0B }, { 0x07EB, 0x15, 0x0B }, 
+   { 0x07EC, 0x14, 0x0B }, { 0x07ED, 0x13, 0x0B }, { 0x07EE, 0x12, 0x0B }, 
+   { 0x07EF, 0x11, 0x0B }, { 0x07F0, 0x10, 0x0B }, { 0x07F1, 0x0F, 0x0B }, 
+   { 0x07F2, 0x0E, 0x0B }, { 0x07F3, 0x0D, 0x0B }, { 0x07F4, 0x0C, 0x0B }, 
+   { 0x07F5, 0x0B, 0x0B }, { 0x07F6, 0x09, 0x0B }, { 0x07F7, 0x08, 0x0B }, 
+   { 0x07F8, 0x07, 0x0B }, { 0x07F9, 0x06, 0x0B }, { 0x07FA, 0x05, 0x0B }, 
+   { 0x07FB, 0x04, 0x0B }, { 0x07FC, 0x03, 0x0B }, { 0x07FD, 0x02, 0x0B }, 
+   { 0x07FE, 0x01, 0x0B }, { 0x07FF, 0x00, 0x0B }
+};
+
+struct DishDescriptor::HuffmanTable DishDescriptor::Table255[SIZE_TABLE_255] = {
+   { 0x0000, 0x20, 0x02 }, { 0x0800, 0x65, 0x04 }, { 0x0A00, 0x72, 0x04 }, 
+   { 0x0C00, 0x6E, 0x04 }, { 0x0E00, 0x61, 0x04 }, { 0x1000, 0x74, 0x05 }, 
+   { 0x1100, 0x6F, 0x05 }, { 0x1200, 0x73, 0x05 }, { 0x1300, 0x69, 0x05 }, 
+   { 0x1400, 0x6C, 0x05 }, { 0x1500, 0x75, 0x05 }, { 0x1600, 0x63, 0x05 }, 
+   { 0x1700, 0x64, 0x05 }, { 0x1800, 0x70, 0x07 }, { 0x1840, 0x6D, 0x07 }, 
+   { 0x1880, 0x76, 0x07 }, { 0x18C0, 0x67, 0x07 }, { 0x1900, 0x68, 0x07 }, 
+   { 0x1940, 0x2E, 0x07 }, { 0x1980, 0x66, 0x07 }, { 0x19C0, 0x0A, 0x07 }, 
+   { 0x1A00, 0x53, 0x07 }, { 0x1A40, 0x41, 0x07 }, { 0x1A80, 0x45, 0x07 }, 
+   { 0x1AC0, 0x43, 0x07 }, { 0x1B00, 0x27, 0x07 }, { 0x1B40, 0x7A, 0x07 }, 
+   { 0x1B80, 0x52, 0x07 }, { 0x1BC0, 0x22, 0x07 }, { 0x1C00, 0x4C, 0x08 }, 
+   { 0x1C20, 0x49, 0x08 }, { 0x1C40, 0x4F, 0x08 }, { 0x1C60, 0x62, 0x08 }, 
+   { 0x1C80, 0x54, 0x08 }, { 0x1CA0, 0x4E, 0x08 }, { 0x1CC0, 0x55, 0x08 }, 
+   { 0x1CE0, 0x79, 0x08 }, { 0x1D00, 0x44, 0x08 }, { 0x1D20, 0x50, 0x08 }, 
+   { 0x1D40, 0x71, 0x08 }, { 0x1D60, 0x56, 0x08 }, { 0x1D80, 0x2D, 0x08 }, 
+   { 0x1DA0, 0x3A, 0x08 }, { 0x1DC0, 0x2C, 0x08 }, { 0x1DE0, 0x48, 0x08 }, 
+   { 0x1E00, 0x4D, 0x09 }, { 0x1E10, 0x78, 0x09 }, { 0x1E20, 0x77, 0x09 }, 
+   { 0x1E30, 0x42, 0x09 }, { 0x1E40, 0x47, 0x09 }, { 0x1E50, 0x46, 0x09 }, 
+   { 0x1E60, 0x30, 0x09 }, { 0x1E70, 0x3F, 0x09 }, { 0x1E80, 0x33, 0x09 }, 
+   { 0x1E90, 0x2F, 0x09 }, { 0x1EA0, 0x39, 0x09 }, { 0x1EB0, 0x31, 0x09 }, 
+   { 0x1EC0, 0x38, 0x09 }, { 0x1ED0, 0x6B, 0x09 }, { 0x1EE0, 0x6A, 0x09 }, 
+   { 0x1EF0, 0x21, 0x09 }, { 0x1F00, 0x36, 0x0A }, { 0x1F08, 0x35, 0x0A }, 
+   { 0x1F10, 0x59, 0x0A }, { 0x1F18, 0x51, 0x0A }, { 0x1F20, 0x34, 0x0B }, 
+   { 0x1F24, 0x58, 0x0B }, { 0x1F28, 0x32, 0x0B }, { 0x1F2C, 0x2B, 0x0B }, 
+   { 0x1F30, 0x2A, 0x0B }, { 0x1F34, 0x5A, 0x0B }, { 0x1F38, 0x4A, 0x0B }, 
+   { 0x1F3C, 0x29, 0x0B }, { 0x1F40, 0x28, 0x0C }, { 0x1F42, 0x23, 0x0C }, 
+   { 0x1F44, 0x57, 0x0C }, { 0x1F46, 0x4B, 0x0C }, { 0x1F48, 0x3C, 0x0C }, 
+   { 0x1F4A, 0x37, 0x0C }, { 0x1F4C, 0x7D, 0x0C }, { 0x1F4E, 0x7B, 0x0C }, 
+   { 0x1F50, 0x60, 0x0C }, { 0x1F52, 0x26, 0x0C }, { 0x1F54, 0xFE, 0x0D }, 
+   { 0x1F55, 0xFD, 0x0D }, { 0x1F56, 0xFC, 0x0D }, { 0x1F57, 0xFB, 0x0D }, 
+   { 0x1F58, 0xFA, 0x0D }, { 0x1F59, 0xF9, 0x0D }, { 0x1F5A, 0xF8, 0x0D }, 
+   { 0x1F5B, 0xF7, 0x0D }, { 0x1F5C, 0xF6, 0x0D }, { 0x1F5D, 0xF5, 0x0D }, 
+   { 0x1F5E, 0xF4, 0x0D }, { 0x1F5F, 0xF3, 0x0D }, { 0x1F60, 0xF2, 0x0D }, 
+   { 0x1F61, 0xF1, 0x0D }, { 0x1F62, 0xF0, 0x0D }, { 0x1F63, 0xEF, 0x0D }, 
+   { 0x1F64, 0xEE, 0x0D }, { 0x1F65, 0xED, 0x0D }, { 0x1F66, 0xEC, 0x0D }, 
+   { 0x1F67, 0xEB, 0x0D }, { 0x1F68, 0xEA, 0x0D }, { 0x1F69, 0xE9, 0x0D }, 
+   { 0x1F6A, 0xE8, 0x0D }, { 0x1F6B, 0xE7, 0x0D }, { 0x1F6C, 0xE6, 0x0D }, 
+   { 0x1F6D, 0xE5, 0x0D }, { 0x1F6E, 0xE4, 0x0D }, { 0x1F6F, 0xE3, 0x0D }, 
+   { 0x1F70, 0xE2, 0x0D }, { 0x1F71, 0xE1, 0x0D }, { 0x1F72, 0xE0, 0x0D }, 
+   { 0x1F73, 0xDF, 0x0D }, { 0x1F74, 0xDE, 0x0D }, { 0x1F75, 0xDD, 0x0D }, 
+   { 0x1F76, 0xDC, 0x0D }, { 0x1F77, 0xDB, 0x0D }, { 0x1F78, 0xDA, 0x0D }, 
+   { 0x1F79, 0xD9, 0x0D }, { 0x1F7A, 0xD8, 0x0D }, { 0x1F7B, 0xD7, 0x0D }, 
+   { 0x1F7C, 0xD6, 0x0D }, { 0x1F7D, 0xD5, 0x0D }, { 0x1F7E, 0xD4, 0x0D }, 
+   { 0x1F7F, 0xD3, 0x0D }, { 0x1F80, 0xD2, 0x0D }, { 0x1F81, 0xD1, 0x0D }, 
+   { 0x1F82, 0xD0, 0x0D }, { 0x1F83, 0xCF, 0x0D }, { 0x1F84, 0xCE, 0x0D }, 
+   { 0x1F85, 0xCD, 0x0D }, { 0x1F86, 0xCC, 0x0D }, { 0x1F87, 0xCB, 0x0D }, 
+   { 0x1F88, 0xCA, 0x0D }, { 0x1F89, 0xC9, 0x0D }, { 0x1F8A, 0xC8, 0x0D }, 
+   { 0x1F8B, 0xC7, 0x0D }, { 0x1F8C, 0xC6, 0x0D }, { 0x1F8D, 0xC5, 0x0D }, 
+   { 0x1F8E, 0xC4, 0x0D }, { 0x1F8F, 0xC3, 0x0D }, { 0x1F90, 0xC2, 0x0D }, 
+   { 0x1F91, 0xC1, 0x0D }, { 0x1F92, 0xC0, 0x0D }, { 0x1F93, 0xBF, 0x0D }, 
+   { 0x1F94, 0xBE, 0x0D }, { 0x1F95, 0xBD, 0x0D }, { 0x1F96, 0xBC, 0x0D }, 
+   { 0x1F97, 0xBB, 0x0D }, { 0x1F98, 0xBA, 0x0D }, { 0x1F99, 0xB9, 0x0D }, 
+   { 0x1F9A, 0xB8, 0x0D }, { 0x1F9B, 0xB7, 0x0D }, { 0x1F9C, 0xB6, 0x0D }, 
+   { 0x1F9D, 0xB5, 0x0D }, { 0x1F9E, 0xB4, 0x0D }, { 0x1F9F, 0xB3, 0x0D }, 
+   { 0x1FA0, 0xB2, 0x0D }, { 0x1FA1, 0xB1, 0x0D }, { 0x1FA2, 0xB0, 0x0D }, 
+   { 0x1FA3, 0xAF, 0x0D }, { 0x1FA4, 0xAE, 0x0D }, { 0x1FA5, 0xAD, 0x0D }, 
+   { 0x1FA6, 0xAC, 0x0D }, { 0x1FA7, 0xAB, 0x0D }, { 0x1FA8, 0xAA, 0x0D }, 
+   { 0x1FA9, 0xA9, 0x0D }, { 0x1FAA, 0xA8, 0x0D }, { 0x1FAB, 0xA7, 0x0D }, 
+   { 0x1FAC, 0xA6, 0x0D }, { 0x1FAD, 0xA5, 0x0D }, { 0x1FAE, 0xA4, 0x0D }, 
+   { 0x1FAF, 0xA3, 0x0D }, { 0x1FB0, 0xA2, 0x0D }, { 0x1FB1, 0xA1, 0x0D }, 
+   { 0x1FB2, 0xA0, 0x0D }, { 0x1FB3, 0x9F, 0x0D }, { 0x1FB4, 0x9E, 0x0D }, 
+   { 0x1FB5, 0x9D, 0x0D }, { 0x1FB6, 0x9C, 0x0D }, { 0x1FB7, 0x9B, 0x0D }, 
+   { 0x1FB8, 0x9A, 0x0D }, { 0x1FB9, 0x99, 0x0D }, { 0x1FBA, 0x98, 0x0D }, 
+   { 0x1FBB, 0x97, 0x0D }, { 0x1FBC, 0x96, 0x0D }, { 0x1FBD, 0x95, 0x0D }, 
+   { 0x1FBE, 0x94, 0x0D }, { 0x1FBF, 0x93, 0x0D }, { 0x1FC0, 0x92, 0x0D }, 
+   { 0x1FC1, 0x91, 0x0D }, { 0x1FC2, 0x90, 0x0D }, { 0x1FC3, 0x8F, 0x0D }, 
+   { 0x1FC4, 0x8E, 0x0D }, { 0x1FC5, 0x8D, 0x0D }, { 0x1FC6, 0x8C, 0x0D }, 
+   { 0x1FC7, 0x8B, 0x0D }, { 0x1FC8, 0x8A, 0x0D }, { 0x1FC9, 0x89, 0x0D }, 
+   { 0x1FCA, 0x88, 0x0D }, { 0x1FCB, 0x87, 0x0D }, { 0x1FCC, 0x86, 0x0D }, 
+   { 0x1FCD, 0x85, 0x0D }, { 0x1FCE, 0x84, 0x0D }, { 0x1FCF, 0x83, 0x0D }, 
+   { 0x1FD0, 0x82, 0x0D }, { 0x1FD1, 0x81, 0x0D }, { 0x1FD2, 0x80, 0x0D }, 
+   { 0x1FD3, 0x7F, 0x0D }, { 0x1FD4, 0x7E, 0x0D }, { 0x1FD5, 0x7C, 0x0D }, 
+   { 0x1FD6, 0x5F, 0x0D }, { 0x1FD7, 0x5E, 0x0D }, { 0x1FD8, 0x5D, 0x0D }, 
+   { 0x1FD9, 0x5C, 0x0D }, { 0x1FDA, 0x5B, 0x0D }, { 0x1FDB, 0x40, 0x0D }, 
+   { 0x1FDC, 0x3E, 0x0D }, { 0x1FDD, 0x3D, 0x0D }, { 0x1FDE, 0x3B, 0x0D }, 
+   { 0x1FDF, 0x25, 0x0D }, { 0x1FE0, 0x24, 0x0D }, { 0x1FE1, 0x1F, 0x0D }, 
+   { 0x1FE2, 0x1E, 0x0D }, { 0x1FE3, 0x1D, 0x0D }, { 0x1FE4, 0x1C, 0x0D }, 
+   { 0x1FE5, 0x1B, 0x0D }, { 0x1FE6, 0x1A, 0x0D }, { 0x1FE7, 0x19, 0x0D }, 
+   { 0x1FE8, 0x18, 0x0D }, { 0x1FE9, 0x17, 0x0D }, { 0x1FEA, 0x16, 0x0D }, 
+   { 0x1FEB, 0x15, 0x0D }, { 0x1FEC, 0x14, 0x0D }, { 0x1FED, 0x13, 0x0D }, 
+   { 0x1FEE, 0x12, 0x0D }, { 0x1FEF, 0x11, 0x0D }, { 0x1FF0, 0x10, 0x0D }, 
+   { 0x1FF1, 0x0F, 0x0D }, { 0x1FF2, 0x0E, 0x0D }, { 0x1FF3, 0x0D, 0x0D }, 
+   { 0x1FF4, 0x0C, 0x0D }, { 0x1FF5, 0x0B, 0x0D }, { 0x1FF6, 0x09, 0x0D }, 
+   { 0x1FF7, 0x08, 0x0D }, { 0x1FF8, 0x07, 0x0D }, { 0x1FF9, 0x06, 0x0D }, 
+   { 0x1FFA, 0x05, 0x0D }, { 0x1FFB, 0x04, 0x0D }, { 0x1FFC, 0x03, 0x0D }, 
+   { 0x1FFD, 0x02, 0x0D }, { 0x1FFE, 0x01, 0x0D }, { 0x1FFF, 0x00, 0x0D }
+};
+
+} //end of namespace
diff -Nur vdr-1.7.14.orig/libsi/dish.h vdr-1.7.14/libsi/dish.h
--- vdr-1.7.14.orig/libsi/dish.h	1969-12-31 19:00:00.000000000 -0500
+++ vdr-1.7.14/libsi/dish.h	2010-03-28 12:57:06.000000000 -0400
@@ -0,0 +1,46 @@
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef LIBSI_DISH_H
+#define LIBSI_DISH_H
+
+#include "si.h"
+
+#define SIZE_TABLE_128 128
+#define SIZE_TABLE_255 255
+
+namespace SI {
+
+class DishDescriptor : public Descriptor {
+public:
+   DishDescriptor(void);
+   ~DishDescriptor();
+   const char* getText(void) const { return text; }
+   const char* getShortText(void) const { return shortText; }
+   // Decompress the byte arrary and stores the result to a text string
+   void Decompress(unsigned char Tid);
+protected: 
+   virtual void Parse() {};
+
+   const char* text; // name or description of the event
+   const char* shortText; // usually the episode name
+   unsigned char* decompressed;
+   
+   struct HuffmanTable {
+      unsigned int  startingAddress;
+      unsigned char character;
+      unsigned char numberOfBits;
+   };
+   static HuffmanTable Table128[SIZE_TABLE_128];
+   static HuffmanTable Table255[SIZE_TABLE_255];  
+};
+
+} //end of namespace 
+
+#endif //LIBSI_DISH_H
diff -Nur vdr-1.7.14.orig/libsi/Makefile vdr-1.7.14/libsi/Makefile
--- vdr-1.7.14.orig/libsi/Makefile	2006-05-26 06:40:19.000000000 -0400
+++ vdr-1.7.14/libsi/Makefile	2010-03-28 12:57:06.000000000 -0400
@@ -23,7 +23,7 @@
 
 ### The object files (add further files here):
 
-OBJS = util.o si.o section.o descriptor.o
+OBJS = util.o si.o section.o descriptor.o dish.o
 
 ### Implicit rules:
 
@@ -51,4 +51,5 @@
 
 dist:
 	tar cvzf libsi.tar.gz -C .. libsi/util.c libsi/si.c libsi/section.c libsi/descriptor.c \
-   libsi/util.h libsi/si.h libsi/section.h libsi/descriptor.h libsi/headers.h libsi/Makefile libsi/gendescr.pl
+   libsi/util.h libsi/si.h libsi/section.h libsi/descriptor.h libsi/headers.h libsi/Makefile libsi/gendescr.pl \
+   libsi/dish.c
diff -Nur vdr-1.7.14.orig/libsi/si.c vdr-1.7.14/libsi/si.c
--- vdr-1.7.14.orig/libsi/si.c	2010-02-13 05:31:52.000000000 -0500
+++ vdr-1.7.14/libsi/si.c	2010-03-28 12:57:06.000000000 -0400
@@ -17,6 +17,7 @@
 #include <stdlib.h> // for broadcaster stupidity workaround
 #include <string.h>
 #include "descriptor.h"
+#include "dish.h"
 
 namespace SI {
 
@@ -606,6 +607,10 @@
          case ExtensionDescriptorTag:
             d=new ExtensionDescriptor();
             break;
+         case DishShortEventDescriptorTag:
+         case DishExtendedEventDescriptorTag:
+            d=new DishDescriptor();
+            break;
 
          //note that it is no problem to implement one
          //of the unimplemented descriptors.
diff -Nur vdr-1.7.14.orig/libsi/si.h vdr-1.7.14/libsi/si.h
--- vdr-1.7.14.orig/libsi/si.h	2010-02-13 05:31:34.000000000 -0500
+++ vdr-1.7.14/libsi/si.h	2010-03-28 12:57:06.000000000 -0400
@@ -122,6 +122,9 @@
                AdaptationFieldDataDescriptorTag = 0x70,
                ServiceIdentifierDescriptorTag = 0x71,
                ServiceAvailabilityDescriptorTag = 0x72,
+               DishRatingDescriptorTag = 0x89,
+               DishShortEventDescriptorTag = 0x91,
+               DishExtendedEventDescriptorTag = 0x92,
   // defined by ETSI (EN 300 468) v 1.7.1
                DefaultAuthorityDescriptorTag = 0x73,
                RelatedContentDescriptorTag = 0x74,
diff -Nur vdr-1.7.14.orig/pat.c vdr-1.7.14/pat.c
--- vdr-1.7.14.orig/pat.c	2010-03-06 07:00:30.000000000 -0500
+++ vdr-1.7.14/pat.c	2010-03-28 12:58:18.000000000 -0400
@@ -448,7 +448,7 @@
                       }
                       break;
               case 0x81: // STREAMTYPE_USER_PRIVATE
-                      if (Channel->IsAtsc()) { // ATSC AC-3
+                      { // ATSC AC-3
                          char lang[MAXLANGCODE1] = { 0 };
                          SI::Descriptor *d;
                          for (SI::Loop::Iterator it; (d = stream.streamDescriptors.getNext(it)); ) {
diff -Nur vdr-1.7.14.orig/skinclassic.c vdr-1.7.14/skinclassic.c
--- vdr-1.7.14.orig/skinclassic.c	2010-02-13 08:44:48.000000000 -0500
+++ vdr-1.7.14/skinclassic.c	2010-03-28 12:57:06.000000000 -0400
@@ -374,6 +374,13 @@
      textScroller.Set(osd, x1, y, x2 - x1, y3 - y, Event->Description(), font, Theme.Color(clrMenuEventDescription), Theme.Color(clrBackground));
      SetTextScrollbar();
      }
+  y += textScroller.Height() + font->Height();  
+  if (Event->StarRating()) {
+     cString buffer = cString::sprintf(" %s ", *Event->GetStarRatingString());
+     const cFont *font = cFont::GetFont(fontSml);
+     int w = font->Width(buffer);
+     osd->DrawText(x3 - w, y, buffer, Theme.Color(clrMenuEventVpsFg), Theme.Color(clrMenuEventVpsBg), font, w);
+     }
 }
 
 void cSkinClassicDisplayMenu::SetRecording(const cRecording *Recording)
@@ -418,6 +425,13 @@
      textScroller.Set(osd, x1, y, x2 - x1, y3 - y, Info->Description(), font, Theme.Color(clrMenuEventDescription), Theme.Color(clrBackground));
      SetTextScrollbar();
      }
+  y += textScroller.Height() + font->Height();
+  if (Info->GetEvent()->StarRating()) {
+     cString buffer = cString::sprintf(" %s ", *Info->GetEvent()->GetStarRatingString());
+     const cFont *font = cFont::GetFont(fontSml);
+     int w = font->Width(buffer);
+     osd->DrawText(x3 - w, y, buffer, Theme.Color(clrMenuEventVpsFg), Theme.Color(clrMenuEventVpsBg), font, w);
+     }
 }
 
 void cSkinClassicDisplayMenu::SetText(const char *Text, bool FixedFont)
diff -Nur vdr-1.7.14.orig/skinsttng.c vdr-1.7.14/skinsttng.c
--- vdr-1.7.14.orig/skinsttng.c	2010-02-13 08:30:59.000000000 -0500
+++ vdr-1.7.14/skinsttng.c	2010-03-28 12:57:06.000000000 -0400
@@ -631,6 +631,16 @@
      osd->DrawEllipse  (x1, yb,             x2, yb + Roundness, frameColor, -2);
      SetTextScrollbar();
      }
+  y += textScroller.Height() + font->Height();
+  if (Event->StarRating()) {
+     cString buffer = cString::sprintf(" %s ", *Event->GetStarRatingString());
+     const cFont *font = cFont::GetFont(fontSml);
+     int w = font->Width(buffer);
+     osd->DrawText(x4 - w, y, buffer, Theme.Color(clrMenuEventVps), frameColor, font, w);
+     int yb = y + font->Height();
+     osd->DrawRectangle(x5, y, x6 - 1, yb - 1, frameColor);
+     osd->DrawEllipse  (x6, y, x7 - 1, yb - 1, frameColor, 5);
+     }
 }
 
 void cSkinSTTNGDisplayMenu::SetRecording(const cRecording *Recording)
@@ -685,6 +695,16 @@
      osd->DrawEllipse  (x1, yb,             x2, yb + Roundness, frameColor, -2);
      SetTextScrollbar();
      }
+  y += textScroller.Height() + font->Height();
+  if (Info->GetEvent()->StarRating()) {
+     cString buffer = cString::sprintf(" %s ", *Info->GetEvent()->GetStarRatingString());
+     const cFont *font = cFont::GetFont(fontSml);
+     int w = font->Width(buffer);
+     osd->DrawText(x4 - w, y, buffer, Theme.Color(clrMenuEventVps), frameColor, font, w);
+     int yb = y + font->Height();
+     osd->DrawRectangle(x5, y, x6 - 1, yb - 1, frameColor);
+     osd->DrawEllipse  (x6, y, x7 - 1, yb - 1, frameColor, 5);
+     }
 }
 
 void cSkinSTTNGDisplayMenu::SetText(const char *Text, bool FixedFont)
