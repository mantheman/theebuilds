--- cfg-mplayer.h.org	2010-12-01 16:45:37.000000000 -0500
+++ cfg-mplayer.h	2010-12-01 15:21:23.000000000 -0500
@@ -38,6 +38,8 @@
 #include "sub/unrar_exec.h"
 
 
+extern int growing_file_pause_enable;
+
 const m_option_t vd_conf[]={
     {"help", "Use MPlayer with an appropriate video file instead of live partners to avoid vd.\n", CONF_TYPE_PRINT, CONF_NOCFG|CONF_GLOBAL, 0, 0, NULL},
     {NULL, NULL, 0, 0, 0, 0, NULL}
@@ -346,6 +348,8 @@
     {"tvscan", "MPlayer was compiled without TV interface support.\n", CONF_TYPE_PRINT, 0, 0, 0, NULL},
 #endif /* CONFIG_TV */
 
+    {"livepause", &growing_file_pause_enable, CONF_TYPE_INT, CONF_RANGE, 0, 60, NULL},
+
     {"list-properties", &list_properties, CONF_TYPE_FLAG, CONF_GLOBAL, 0, 1, NULL},
     {"identify", &mp_msg_levels[MSGT_IDENTIFY], CONF_TYPE_FLAG, CONF_GLOBAL, 0, MSGL_V, NULL},
     {"-help", help_text, CONF_TYPE_PRINT, CONF_NOCFG|CONF_GLOBAL, 0, 0, NULL},
--- libmpdemux/demuxer.c.org	2010-12-01 16:45:48.000000000 -0500
+++ libmpdemux/demuxer.c	2010-12-01 15:21:23.000000000 -0500
@@ -190,6 +190,10 @@
     NULL
 };
 
+
+double first_pts_hack = 0;
+int growing_file_pause_enable=0;
+
 void free_demuxer_stream(demux_stream_t *ds)
 {
     ds_free_packs(ds);
@@ -896,6 +900,23 @@
         if (!demux_fill_buffer(demux, ds))
             return MP_NOPTS_VALUE;
     }
+    if (growing_file_pause_enable)
+    {
+      if (ds && ds->first)
+      {
+           if (first_pts_hack == 0)
+               first_pts_hack = ds->first->pts;
+           else if (ds->first->pts <  first_pts_hack)
+               first_pts_hack = ds->first->pts;
+      }
+      if (ds && ds->current)
+      {
+           if (first_pts_hack == 0)
+               first_pts_hack = ds->current->pts;
+           else if (ds->first->pts <  first_pts_hack)
+               first_pts_hack = ds->current->pts;
+      }
+    }
     // take pts from "current" if we never read from it.
     if (ds->current && !ds->buffer_pos)
         return ds->current->pts;
@@ -1463,6 +1484,11 @@
         get_time_ans = demuxer->stream_pts;
     else if (sh_video)
         get_time_ans = sh_video->pts;
+    if (growing_file_pause_enable)
+    {
+      if (get_time_ans - first_pts_hack > 0)
+          return (int)get_time_ans - first_pts_hack;
+    }
     return (int) get_time_ans;
 }
 
--- stream/stream_file.c.org	2010-12-01 17:10:06.000000000 -0500
+++ stream/stream_file.c	2010-12-01 17:11:54.000000000 -0500
@@ -90,8 +90,18 @@
     case STREAM_CTRL_GET_SIZE: {
       off_t size;
 
-      size = lseek(s->fd, 0, SEEK_END);
-      lseek(s->fd, s->pos, SEEK_SET);
+      if (s->url)
+      {
+          struct stat st1;
+          stat(s->url, &st1);
+          size = st1.st_size;
+      }
+      else
+      {
+          size = lseek(s->fd, 0, SEEK_END);
+          lseek(s->fd, s->pos, SEEK_SET);
+      }
+
       if(size != (off_t)-1) {
         *((off_t*)arg) = size;
         return 1;
--- mplayer.c.org	2010-12-01 16:45:57.000000000 -0500
+++ mplayer.c	2010-12-01 17:35:01.000000000 -0500
@@ -148,6 +152,8 @@
 double start_pts = MP_NOPTS_VALUE;
 char *heartbeat_cmd;
 
+extern double first_pts_hack;
+extern int growing_file_pause_enable;
 #define ROUND(x) ((int)((x)<0 ? (x)-0.5 : (x)+0.5))
 
 
@@ -2674,7 +2685,92 @@
 // return -1 if seek failed (non-seekable stream?), 0 otherwise
 static int seek(MPContext *mpctx, double amount, int style)
 {
+    double time_to_end = 0;
     current_module = "seek";
+
+    if (growing_file_pause_enable)
+    {
+      sh_video_t *sh_video = mpctx->demuxer->video->sh;
+      stream_t *st = mpctx->stream;
+      double amount_org = amount, seek_1_second, size_now_to_end;
+      double new_pts = sh_video->pts - first_pts_hack;
+      off_t sz = 0;
+
+      seek_1_second = ((double)mpctx->demuxer->filepos / new_pts);
+      if (amount > 45)
+          amount = 45;
+      if (st)
+      {
+          (*st->control)(st,STREAM_CTRL_GET_SIZE, &sz);
+          if (sz > mpctx->demuxer->movi_end)
+             mpctx->demuxer->movi_end = sz;
+      }
+
+      if (st && amount > 0 && mpctx->demuxer->movi_end > mpctx->demuxer->filepos)
+      {
+          if (sh_video)
+          {
+              size_now_to_end = (double)(mpctx->demuxer->movi_end - mpctx->demuxer->filepos);
+              time_to_end = size_now_to_end/seek_1_second;
+
+//            printf("..... time_to_end: %0.2f -------- \n", time_to_end);
+
+              if (time_to_end < growing_file_pause_enable)
+              {
+                  do
+                  {
+                      (*st->control)(st,STREAM_CTRL_GET_SIZE, &sz);
+
+                      if (sz > mpctx->demuxer->movi_end)
+                          mpctx->demuxer->movi_end = sz;
+                      else if (sz == mpctx->demuxer->movi_end)
+                          continue;
+
+                      size_now_to_end = (double)(mpctx->demuxer->movi_end - mpctx->demuxer->filepos);
+                      time_to_end = size_now_to_end/seek_1_second;
+                      set_osd_msg(OSD_MSG_TEXT, 1, osd_duration, "LIVE: %0.2f", time_to_end);
+                  }
+                  while (time_to_end < growing_file_pause_enable);
+
+                  return -1;
+              }
+
+              if (amount > time_to_end )
+                  amount = time_to_end - growing_file_pause_enable;
+
+              if (amount_org > 0 && amount < 0)
+              {
+                  set_osd_msg(OSD_MSG_TEXT, 1, osd_duration, "LIVE: %0.2f", time_to_end);
+                  return -1;
+              }
+          }
+      }
+      if (time_to_end < amount + growing_file_pause_enable)
+      {
+                //set_osd_msg(OSD_MSG_TEXT, 1, osd_duration, "LIVE: %0.2f", time_to_end);
+                do
+                {
+                    (*st->control)(st,STREAM_CTRL_GET_SIZE, &sz);
+
+                    if (sz > mpctx->demuxer->movi_end)
+                        mpctx->demuxer->movi_end = sz;
+                    else if (sz == mpctx->demuxer->movi_end)
+                        continue;
+
+                    size_now_to_end = (double)(mpctx->demuxer->movi_end - mpctx->demuxer->filepos);
+                    time_to_end = size_now_to_end/seek_1_second;
+                    set_osd_msg(OSD_MSG_TEXT, 1, osd_duration, "LIVE: %0.2f", time_to_end);
+                }
+                while (time_to_end < growing_file_pause_enable);
+                return -1;
+      }
+      if (amount > 0 && amount < 1)
+      {
+          set_osd_msg(OSD_MSG_TEXT, 1, osd_duration, "LIVE: %0.2f", time_to_end);
+          return -1;
+      }
+    printf("Seeking time_to_end: %0.2f, amount: %0.2f\n", time_to_end, amount);
+    }
     if (demux_seek(mpctx->demuxer, amount, audio_delay, style) == 0)
 	return -1;
 
@@ -3725,6 +3821,19 @@
   mpctx->eof=PT_NEXT_ENTRY; goto goto_next_file;
 }
 
+if (growing_file_pause_enable && mpctx->stream && mpctx->demuxer)
+{
+    off_t sz = 0;
+    double size_1_second = (((double)mpctx->demuxer->filepos / first_pts_hack) * 90000);
+    //printf("POOP: %0.2f, %s\n", size_1_second, st->url);
+    do
+    {
+        (*mpctx->stream->control)(mpctx->stream, STREAM_CTRL_GET_SIZE, &sz);
+        sleep(.100);
+    } while( sz/size_1_second < growing_file_pause_enable );
+    //printf("MOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO!!!!!!!!!!!!!!!!!!!!!!!!\n");
+}
+
 if (seek_to_sec) {
     seek(mpctx, seek_to_sec, SEEK_ABSOLUTE);
     end_at.pos += seek_to_sec;
