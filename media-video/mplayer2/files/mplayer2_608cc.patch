--- sub/sub_cc.c.org	2011-06-20 12:32:52.000000000 -0400
+++ sub/sub_cc.c	2011-06-21 16:59:00.000000000 -0400
@@ -43,6 +43,11 @@
 
 #define CC_MAX_LINE_LENGTH 64
 
+uint8_t has_708 = 0, has_scte20 = 0;
+uint32_t t_ref_offset = 0, tmp_frame_count = 0;
+static EIA608_DATA *field0_608 = NULL;
+static EIA608_DATA *field1_608 = NULL;
+
 static char chartbl[128];
 
 static subtitle buf1,buf2;
@@ -58,6 +63,68 @@
 static int cc_mode=CC_ROLLON;
 static int cc_lines=4; ///< number of visible rows in CC roll-up mode, not used in CC roll-on mode
 
+void subcc_add_to_608_cc(EIA608_DATA *);
+void subcc_add_to_608_xds(EIA608_DATA *);
+void subcc_print_608_cc(EIA608_DATA *);
+uint8_t _bits_swap_byte(uint8_t b);
+BITSTREAM * bits_create(uint8_t * stream, uint32_t len);
+int8_t bits_get_next_bit(BITSTREAM * b);
+uint64_t bits_get_bit_count(BITSTREAM * b, uint32_t num_of_bits, int8_t *rc);
+
+
+uint64_t bits_get_bit_count(BITSTREAM * b, uint32_t num_of_bits, int8_t *rc)
+{
+    int8_t i;
+    uint64_t ret = 0;
+
+    for (i = (num_of_bits - 1); i >= 0; i--)
+    {
+        if ((*rc = bits_get_next_bit(b)) < 0)
+            break;
+        ret |= (*rc << i);
+    }
+    return ret;
+}
+
+int8_t bits_get_next_bit(BITSTREAM * b)
+{
+    int8_t ret = -1;
+
+    if (b && b->stream && (b->bit_offset < (b->len*8)))
+    {
+        uint32_t _off = b->bit_offset - ((b->bit_offset / 8) * 8);
+        ret = ((b->stream[b->bit_offset++/8] & (0x80 >> _off) ) >> (7 - _off));
+    }
+    return ret;
+}
+
+BITSTREAM * bits_create(uint8_t * stream, uint32_t len)
+{
+    BITSTREAM * b = malloc(sizeof(BITSTREAM));
+
+    b->stream = stream;
+    b->len = len;
+    b->bit_offset = 0;
+
+    return b;
+}
+
+uint8_t _bits_swap_byte(uint8_t b)
+{
+	uint8_t c = 0;
+	c |= (0x80 & b) >> 7;
+	c |= (0x40 & b) >> 5;
+	c |= (0x20 & b) >> 3;
+	c |= (0x10 & b) >> 1;
+
+	c |= (0x8 & b) << 1;
+	c |= (0x4 & b) << 3;
+	c |= (0x2 & b) << 5;
+	c |= (0x1 & b) << 7;
+    return c;
+}
+
+
 static void build_char_table(void)
 {
   int i;
@@ -337,11 +404,255 @@
   }
 }
 
+void subcc_print_608_cc(EIA608_DATA * data)
+{
+	int i = 0;
+	uint8_t c1, c2;
+	printf("\n\n608..\n");
+
+	while(data)
+	{
+		c1 = data->data & 0xff;
+		c2 = (data->data >> 8) & 0xff;
+
+		printf("%d - tref: %d -- 1: 0x%x, 2: 0x%x\n", i, data->t_ref, c1, c2);
+		data = data->next;
+		i++;
+	}
+	printf("\n\n");
+}
+
+void subcc_add_to_608_cc(EIA608_DATA * data)
+{
+	if (!field0_608)
+	{
+		field0_608 = data;
+	}
+	else
+	{
+		EIA608_DATA * tmp = field0_608;
+		while(tmp->next)
+		{
+			if (data->t_ref > tmp->t_ref && data->t_ref < tmp->next->t_ref)
+			{
+				data->next = tmp->next;
+				break;
+			}
+			tmp = tmp->next;
+		}
 
-void subcc_process_data(const uint8_t *inputdata, unsigned int len)
+		if (tmp == field0_608 && data->t_ref < tmp->t_ref)
+		{
+			data->next = tmp;
+			field0_608 = data;
+		}
+		else
+		{
+			tmp->next = data;
+		}
+	}
+}
+
+void subcc_add_to_608_xds(EIA608_DATA * data)
+{
+	if (!field1_608)
+	{
+		field1_608 = data;
+	}
+	else
+	{
+		EIA608_DATA * tmp = field1_608;
+		while(tmp->next)
+		{
+			if (data->t_ref > tmp->t_ref && data->t_ref < tmp->next->t_ref)
+			{
+				data->next = tmp->next;
+				break;
+			}
+			tmp = tmp->next;
+		}
+
+		if (tmp == field1_608 && data->t_ref < tmp->t_ref)
+		{
+			data->next = tmp;
+			field1_608 = data;
+		}
+		else
+		{
+			tmp->next = data;
+		}
+	}
+}
+
+void subcc_gop(float pts)
+{
+	EIA608_DATA * tmp = NULL;
+	while (field0_608)
+	{
+		tmp = field0_608;
+		if (has_708 && tmp->type == SUBCC_TYPE_ATSC708)
+			cc_decode_EIA608(tmp->data);
+		else if (has_scte20 && tmp->type == SUBCC_TYPE_SCTE20)
+			cc_decode_EIA608(tmp->data);
+
+		field0_608 = field0_608->next;
+		free(tmp);
+	}
+	if (tmp_frame_count)
+	{
+		t_ref_offset += tmp_frame_count;
+		tmp_frame_count = 0;
+	}
+}
+
+void subcc_process_data(const uint8_t *inputdata, unsigned int len, uint8_t type, int t_ref)
 {
 	if(!subcc_enabled) return;
 	if(!initialized) subcc_init();
 
-	subcc_decode(inputdata, len);
+	tmp_frame_count++;
+	switch(type)
+	{
+		case SUBCC_TYPE_ATSC708:
+		{
+			uint8_t cc_count = 0;
+			int offset = 1;
+
+			if (inputdata[0] != 0x03)
+			{
+				return;
+			}
+
+			has_708 = 1;
+			cc_count = inputdata[offset] & 0x1f;
+
+			if (cc_count)
+			{
+				int i;
+				uint8_t *buf = (uint8_t*)&inputdata[offset+2];
+				uint8_t marker = 0;
+				uint8_t valid = 0;
+				uint8_t type = 0;
+
+				for (i=0; i < cc_count; i++)
+				{
+					marker = (buf[0] & 0xf8) >> 3;
+					valid = (buf[0] & 0x4) >> 2;
+					type = buf[0] & 0x3 ;
+
+					if (marker == 0x1F && valid)
+					{
+						switch (type)
+						{
+							case 0: // CC
+							{
+								EIA608_DATA * cc608 = calloc(1, sizeof(EIA608_DATA));
+								cc608->data = (buf[1] | (buf[2] << 8));
+								cc608->t_ref = t_ref;
+								cc608->type = SUBCC_TYPE_ATSC708;
+								subcc_add_to_608_cc(cc608);
+							}
+							break;
+
+							case 1: // XDS
+							{
+/*
+								EIA608_DATA * cc608 = calloc(1, sizeof(EIA608_DATA));
+								cc608->data = (buf[1] | (buf[2] << 8));
+//								printf("xds, t_ref: %d, offset: %d\n", t_ref, t_ref_offset);
+								cc608->t_ref = (t_ref + t_ref_offset);
+								cc608->type = SUBCC_TYPE_ATSC708;
+								subcc_add_to_608_xds(cc608);
+*/
+//								subcc_print_608_cc(field1_608);
+							}
+							break;
+
+							case 2:
+//								printf("\t(cc) 708 start: 0x%x\n", type);
+							break;
+
+							case 3:
+//								printf("\t(cc) 708 data: 0x%x\n", type);
+							break;
+
+							default:
+								printf("Unknown CC type: 0x%x\n", type);
+							break;
+						}
+
+					}
+					buf+=3;
+				}
+			}
+		}
+		break;
+
+		case SUBCC_TYPE_SCTE20:
+		{
+			uint8_t cc_count = 0;
+			int offset = 0;
+			int8_t rc = 0;
+			BITSTREAM * bs = NULL;
+
+			has_scte20 = 1;
+
+			if (has_708)
+				return;
+
+			bs = bits_create((uint8_t *)inputdata, len);
+
+			if (bs)
+			{
+				cc_count = (uint8_t) bits_get_bit_count(bs, 5, &rc);
+
+				if (cc_count)
+				{
+					int i;
+					uint8_t data1 = 0, data2 = 0;
+					uint8_t cc_priority = 0;
+					uint8_t marker = 0;
+					uint8_t field_num = 0;
+					uint8_t line_offset = 0;
+
+					for (i=0; i < cc_count; i++)
+					{
+						cc_priority = (uint8_t) bits_get_bit_count(bs, 2, &rc);
+						field_num = (uint8_t) bits_get_bit_count(bs, 2, &rc);
+						line_offset = (uint8_t) bits_get_bit_count(bs, 5, &rc);
+						data1 = (uint8_t) bits_get_bit_count(bs, 8, &rc);
+						data2 = (uint8_t) bits_get_bit_count(bs, 8, &rc);
+						marker = (uint8_t) bits_get_bit_count(bs, 1, &rc);
+
+						switch (field_num-1)
+						{
+							case 0: // CC
+							{
+								EIA608_DATA * cc608 = calloc(1, sizeof(EIA608_DATA));
+
+								cc608->data = ((_bits_swap_byte(data1) & 0x7f) | ((_bits_swap_byte(data2) & 0x7f) << 8));
+								cc608->t_ref = t_ref;
+								cc608->type = SUBCC_TYPE_SCTE20;
+								subcc_add_to_608_cc(cc608);
+//								subcc_print_608_cc(field0_608);
+							}
+							break;
+
+							case 1: // XDS
+							break;
+
+							default:
+							break;
+						}
+					}
+				}
+				free(bs);
+			}
+		}
+		break;
+
+		case SUBCC_TYPE_DVDCC:
+			subcc_decode(inputdata, len);
+		break;
+	}
 }
--- sub/sub_cc.h.org	2011-06-20 12:32:50.000000000 -0400
+++ sub/sub_cc.h	2011-06-21 16:51:17.000000000 -0400
@@ -21,9 +21,31 @@
 
 #include <stdint.h>
 
+#define SUBCC_TYPE_ATSC708		0x01
+#define SUBCC_TYPE_SCTE20		0x02
+#define SUBCC_TYPE_DVDCC		0x03
+
+struct bitstream_Struct
+{
+    uint32_t len;
+    uint8_t * stream;
+    uint32_t bit_offset;
+};
+typedef struct bitstream_Struct BITSTREAM;
+
+struct eia608_data
+{
+	uint16_t data;
+	uint32_t t_ref;
+	uint8_t type;
+	struct eia608_data *next;
+};
+typedef struct eia608_data EIA608_DATA;
+
 extern int subcc_enabled;
 
 void subcc_init(void);
-void subcc_process_data(const uint8_t *inputdata, unsigned int len);
+void subcc_gop(float pts);
+void subcc_process_data(const uint8_t *inputdata, unsigned int len, uint8_t type, int t_ref);
 
 #endif /* MPLAYER_SUB_CC_H */
--- libmpdemux/video.c.org	2011-06-21 17:02:02.000000000 -0400
+++ libmpdemux/video.c	2011-06-21 17:04:55.000000000 -0400
@@ -409,13 +409,20 @@
 return 1;
 }
 
-static void process_userdata(const unsigned char* buf,int len){
+static void process_userdata(const unsigned char* buf,int len, int t_ref){
     int i;
     /* if the user data starts with "CC", assume it is a CC info packet */
     if(len>2 && buf[0]=='C' && buf[1]=='C'){
 //    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"video.c: process_userdata() detected Closed Captions!\n");
-      subcc_process_data(buf+2,len-2);
+      subcc_process_data(buf+2,len-2, SUBCC_TYPE_DVDCC, t_ref);
+     }
+    else if (len > 2 && buf[0] == 0x03 && buf[1] == 0x81){
+      subcc_process_data(buf+2, len-2, SUBCC_TYPE_SCTE20, t_ref);
     }
+    else if (len > 4 && buf[0] == 'G' && buf[1] == 'A' && buf[2] == '9' && buf[3] == '4'){
+      subcc_process_data(buf+4, len-4, SUBCC_TYPE_ATSC708, t_ref);
+    }
+
 #ifdef DEMUX_TY_OSD
     if( len > 2 && buf[ 0 ] == 'T' && buf[ 1 ] == 'Y' )
     {
@@ -440,6 +447,7 @@
     float pts=0;
     float fps;
     int picture_coding_type=0;
+    int temporal_reference=0;
     int in_size=0;
     video_codec_t video_codec = find_video_codec(sh_video);
 
@@ -471,8 +479,12 @@
           switch(i){
             case 0x1B3: mp_header_process_sequence_header (&picture, &videobuffer[start]);break;
             case 0x1B5: mp_header_process_extension (&picture, &videobuffer[start]);break;
-            case 0x1B2: process_userdata (&videobuffer[start], videobuf_len-start);break;
-            case 0x100: picture_coding_type=(videobuffer[start+1] >> 3) & 7;break;
+            case 0x1B2: process_userdata (&videobuffer[start], videobuf_len-start, temporal_reference);break;
+            case 0x1B8: subcc_gop(pts);break;
+            case 0x100:
+              temporal_reference=(videobuffer[start] << 2) | (videobuffer[start+1] >> 6);
+              picture_coding_type=(videobuffer[start+1] >> 3) & 7;
+            break;
           }
         }
         fps = picture.fps * picture.frame_rate_extension_n / picture.frame_rate_extension_d;
