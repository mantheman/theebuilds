--- cfg-mplayer.h.orig	2011-09-04 18:12:47.000000000 -0400
+++ cfg-mplayer.h	2011-09-13 00:57:39.482496446 -0400
@@ -725,6 +725,8 @@
 };
 #endif
 
+extern int live_pause_enable;
+
 const m_option_t mplayer_opts[]={
     /* name, pointer, type, flags, min, max */
 
@@ -939,6 +941,7 @@
 #else
     {"tvscan", "MPlayer was compiled without TV interface support.\n", CONF_TYPE_PRINT, 0, 0, 0, NULL},
 #endif /* CONFIG_TV */
+    {"livepause", &live_pause_enable, CONF_TYPE_INT, CONF_RANGE, 0, 60, NULL},
 
     OPT_FLAG_ON("list-properties", list_properties, CONF_GLOBAL),
     {"identify", &mp_msg_levels[MSGT_IDENTIFY], CONF_TYPE_FLAG, CONF_GLOBAL, 0, MSGL_V, NULL},
--- libmpdemux/demux_lavf.c.orig	2011-09-04 18:12:47.000000000 -0400
+++ libmpdemux/demux_lavf.c	2011-09-13 00:56:26.790389564 -0400
@@ -24,6 +24,7 @@
 #include <limits.h>
 #include <stdbool.h>
 #include <string.h>
+#include <sys/stat.h>
 
 #include "config.h"
 #include "options.h"
@@ -82,6 +83,20 @@
     int bitrate;
 } lavf_priv_t;
 
+static void _mp_update_end(stream_t *stream)
+{
+    if (stream && stream->url)
+    {
+        struct stat st1;
+        memset(&st1, 0, sizeof(struct stat));
+        stat(stream->url, &st1);
+        if (st1.st_size > stream->end_pos)
+        {
+            stream->end_pos = st1.st_size;
+        }
+    }
+}
+
 static int mp_read(void *opaque, uint8_t *buf, int size)
 {
     struct demuxer *demuxer = opaque;
@@ -103,6 +118,7 @@
     int64_t current_pos;
     mp_msg(MSGT_HEADER, MSGL_DBG2, "mp_seek(%p, %"PRId64", %d)\n",
            stream, pos, whence);
+    _mp_update_end(stream);
     if (whence == SEEK_CUR)
         pos += stream_tell(stream);
     else if (whence == SEEK_END && stream->end_pos > 0)
--- libmpdemux/demux_mkv.c.orig	2011-09-04 18:12:47.000000000 -0400
+++ libmpdemux/demux_mkv.c	2011-09-13 00:56:26.792389548 -0400
@@ -57,6 +57,8 @@
 #include "ffmpeg_files/intreadwrite.h"
 #include "libavutil/avstring.h"
 
+extern int live_pause_enable;
+
 static const unsigned char sipr_swaps[38][2] = {
     {0,63},{1,22},{2,44},{3,90},{5,81},{7,31},{8,86},{9,58},{10,36},{12,68},
     {13,39},{14,73},{15,53},{16,69},{17,57},{19,88},{20,34},{21,71},{24,46},
@@ -1727,8 +1729,12 @@
 
     demuxer->audio->id = -2;  // wait for higher-level code to select track
 
-    if (s->end_pos == 0)
-        demuxer->seekable = 0;
+    if (s->end_pos == 0) {
+        if (live_pause_enable)
+            demuxer->seekable = 1;
+        else
+            demuxer->seekable = 0;
+    }
     else {
         demuxer->movi_start = s->start_pos;
         demuxer->movi_end = s->end_pos;
--- libmpdemux/demuxer.c.orig	2011-09-04 18:12:47.000000000 -0400
+++ libmpdemux/demuxer.c	2011-09-13 00:56:26.794389518 -0400
@@ -52,6 +52,10 @@
 
 static void clear_parser(sh_common_t *sh);
 
+double first_pts_hack=0;
+int live_pause_enable=0;
+
+
 // Demuxer list
 extern const struct demuxer_desc demuxer_desc_edl;
 extern const demuxer_desc_t demuxer_desc_rawaudio;
@@ -879,6 +883,20 @@
         if (!demux_fill_buffer(demux, ds))
             return MP_NOPTS_VALUE;
     }
+    if (live_pause_enable && !first_pts_hack) {
+        if (ds && ds->first) {
+            if (first_pts_hack == 0)
+                first_pts_hack = ds->first->pts;
+            else if (ds->first->pts <  first_pts_hack)
+                first_pts_hack = ds->first->pts;
+        }
+        if (ds && ds->current) {
+            if (first_pts_hack == 0)
+                first_pts_hack = ds->current->pts;
+            else if (ds->first->pts <  first_pts_hack)
+                first_pts_hack = ds->current->pts;
+        }
+    }
     // take pts from "current" if we never read from it.
     if (ds->current && !ds->buffer_pos)
         return ds->current->pts;
--- mplayer.c.orig	2011-09-04 18:12:47.000000000 -0400
+++ mplayer.c	2011-09-13 01:00:16.945564522 -0400
@@ -111,6 +111,10 @@
 
 char *heartbeat_cmd;
 
+extern double first_pts_hack;
+extern int live_pause_enable;
+int auto_pause = 0;
+
 #ifdef HAVE_RTC
 #ifdef __linux__
 #include <linux/rtc.h>
@@ -3086,6 +3090,26 @@
 
     while ((cmd = mp_input_get_cmd(mpctx->input, 20, 1)) == NULL
            || cmd->id == MP_CMD_SET_MOUSE_POS || cmd->pausing == 4) {
+	    if (live_pause_enable && auto_pause)
+    	{
+			off_t sz = 0;
+			struct MPOpts *opts = &mpctx->opts;
+			sh_video_t *sh_video = mpctx->demuxer->video->sh;
+			double new_pts = 0;
+			(*mpctx->stream->control)(mpctx->stream, STREAM_CTRL_GET_SIZE, &sz);
+
+			new_pts = (double) (sz - mpctx->demuxer->filepos) / sh_video->pts;
+
+			set_osd_msg(OSD_MSG_TEXT, 1, opts->osd_duration, "Buffering.. %0.2f", new_pts);
+
+			//printf("HI0: %ld -- %ld (%0.2f)\n", sz, mpctx->demuxer->filepos, new_pts);
+			if(new_pts > live_pause_enable)
+			{
+				auto_pause = 0;
+				unpause_player(mpctx);
+			}
+		}
+
         if (cmd) {
             cmd = mp_input_get_cmd(mpctx->input, 0, 0);
             run_command(mpctx, cmd);
@@ -3311,6 +3335,72 @@
 
     if (hr_seek)
         demuxer_amount -= opts->hr_seek_demuxer_offset;
+
+    if (live_pause_enable && (demuxer_style == 5 || demuxer_style == 9))
+    {
+        sh_video_t *sh_video = mpctx->demuxer->video->sh;
+        demuxer_amount = demuxer_amount - sh_video->pts;
+        demuxer_style = 0;
+    }
+
+    //printf("------- SEEK STYLE: %d, amount: %0.2f, len : %0.2f --------------\n", style, amount, demuxer_get_time_length(mpctx->demuxer));
+    if (live_pause_enable && demuxer_style == 0)
+    {
+        sh_video_t *sh_video = mpctx->demuxer->video->sh;
+        stream_t *st = mpctx->stream;
+        double amount_org = demuxer_amount, seek_1_second, size_now_to_end;
+        double new_pts = sh_video->pts - first_pts_hack;
+        off_t sz = 0;
+
+        seek_1_second = ((double)mpctx->demuxer->filepos / new_pts);
+
+        if (st)
+        {
+            (*st->control)(st,STREAM_CTRL_GET_SIZE, &sz);
+            if (sz > mpctx->demuxer->movi_end)
+               mpctx->demuxer->movi_end = sz;
+        }
+
+        if (st && demuxer_amount > 0 && mpctx->demuxer->movi_end > mpctx->demuxer->filepos)
+        {
+            if (sh_video)
+            {
+                double adjust = 0, diff=0;
+                double time_now = (double)mpctx->demuxer->filepos / seek_1_second ;
+                double time_end = (double)mpctx->demuxer->movi_end / seek_1_second;
+                diff = time_end - time_now;
+                printf("..... filepos: %d, moviend: %d ------------ \n", mpctx->demuxer->filepos, mpctx->demuxer->movi_end);
+                printf("..... time_now: %0.2f, time_end: %0.2f, diff: %0.2f, amount: %0.2f ------------ \n", time_now, time_end, diff, demuxer_amount);
+
+                if (demuxer_amount >= diff+live_pause_enable || diff < demuxer_amount+live_pause_enable)
+                {
+                    if (diff > live_pause_enable + 1)
+                    {
+                        demuxer_amount = diff - (live_pause_enable+1);
+                        if (demuxer_amount < 2)
+                        {
+                            set_osd_msg(OSD_MSG_TEXT, 1, opts->osd_duration, "LIVE: %0.2f", diff);
+                            sleep(1);
+                            return -1;
+                        }
+                    }
+                    else
+                    {
+                        if (diff <= live_pause_enable)
+                        {
+                            int s_t = (live_pause_enable)-(diff/1) + 1;
+                            sleep(s_t);
+                        }
+
+                        set_osd_msg(OSD_MSG_TEXT, 1, opts->osd_duration, "LIVE: %0.2f", diff);
+                        return -1;
+                    }
+                }
+            }
+        }
+    }
+    if (live_pause_enable) printf("Seeking amount: %0.2f, style: %d\n", demuxer_amount, demuxer_style);
+
     int seekresult = demux_seek(mpctx->demuxer, demuxer_amount, audio_delay,
                                 demuxer_style);
     if (need_reset)
@@ -3661,6 +3750,26 @@
             }
         }
 
+        if (live_pause_enable && mpctx->stream && mpctx->demuxer)
+        {
+
+            off_t sz = 0;
+            sh_video_t *sh_video = mpctx->demuxer->video->sh;
+			if (sh_video->pts > 0 && first_pts_hack > 0 && sh_video->pts > first_pts_hack)
+			{
+	            //double new_pts = 0;
+        	    (*mpctx->stream->control)(mpctx->stream, STREAM_CTRL_GET_SIZE, &sz);
+				//new_pts = (double) (sz - mpctx->demuxer->filepos) / sh_video->pts;
+        	    //printf("HI: %ld %ld (%0.2f)\n", sz, mpctx->demuxer->filepos, new_pts);
+				if ((sz - mpctx->demuxer->filepos) < 700000)
+				{
+					auto_pause = 1;
+                	pause_player(mpctx);
+				}
+			}
+        }
+
+
         bool frame_time_remaining = sleep_until_near_frame(mpctx,
                                                            &mpctx->time_frame,
                                                            full_audio_buffers,
--- stream/stream_file.c.orig	2011-09-13 01:03:55.429889898 -0400
+++ stream/stream_file.c	2011-09-13 00:56:26.799389453 -0400
@@ -97,8 +97,18 @@
     case STREAM_CTRL_GET_SIZE: {
       off_t size;
 
-      size = lseek(s->fd, 0, SEEK_END);
-      lseek(s->fd, s->pos, SEEK_SET);
+      if (s->url)
+      {
+          struct stat st1;
+          stat(s->url, &st1);
+          size = st1.st_size;
+      }
+      else
+      {
+          size = lseek(s->fd, 0, SEEK_END);
+          lseek(s->fd, s->pos, SEEK_SET);
+      }
+
       if(size != (off_t)-1) {
         *((off_t*)arg) = size;
         return 1;
