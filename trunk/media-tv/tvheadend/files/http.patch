--- src/capmt.c.org	2012-04-04 23:38:57.000000000 -0400
+++ src/capmt.c	2012-04-05 00:36:21.000000000 -0400
@@ -611,10 +611,12 @@
   lock_assert(&global_lock);
 
   TAILQ_FOREACH(capmt, &capmts, capmt_link) {
+/*
     tvhlog(LOG_INFO, "capmt",
       "Starting capmt server for service \"%s\" on tuner %d", 
       t->tht_svcname,
       t->tht_dvb_mux_instance->tdmi_adapter->tda_adapter_num);
+*/
 
     th_stream_t *st;
 
--- src/iptv_input.c.org	2012-04-04 16:31:12.000000000 -0400
+++ src/iptv_input.c	2012-04-05 00:34:42.000000000 -0400
@@ -41,6 +41,7 @@
 #include "tsdemux.h"
 #include "psi.h"
 #include "settings.h"
+#include "tcp.h"
 
 static int iptv_thread_running;
 static int iptv_epollfd;
@@ -137,8 +138,27 @@
     if(nfds < 1)
       continue;
 
+    r = -1;
     fd = ev.data.fd;
-    r = read(fd, tsb, sizeof(tsb));
+    while (fd)
+    {
+      r = recv(fd, tsb, 1, MSG_WAITALL);
+
+      if (r < 0)
+      {
+         break;
+      }
+      else if (r == 0)
+      {
+        usleep(250000);
+      }
+      else if (tsb[0] == 0x47)
+      {
+        r = recv(fd, &tsb[1], 187+ (188*300), MSG_WAITALL);
+        r += 1;
+        break;
+      }
+    }
 
     if(r > 1 && tsb[0] == 0x47 && (r % 188) == 0) {
       /* Looks like raw TS in UDP */
@@ -202,6 +222,41 @@
     pthread_create(&tid, NULL, iptv_thread, NULL);
   }
 
+  if (t->tht_iptv_iface[0] == 'h' && t->tht_iptv_iface[1] == 't' &&
+      t->tht_iptv_iface[2] == 't' && t->tht_iptv_iface[3] == 'p')
+  {
+    int i=0;
+    char *http_addr = NULL;
+    char channel_url[255] = {0};
+    char get_str[255] = {0};
+    char errbuf[100] = {0};
+
+    sin.sin_addr.s_addr = t->tht_iptv_group.s_addr;
+    http_addr = inet_ntoa(sin.sin_addr);
+    sscanf(t->tht_iptv_iface, "http:%s", channel_url);
+
+    printf("Using http instead of udp, ip: %s, port: %d, url: %s\n", http_addr, t->tht_iptv_port, channel_url);
+
+    fd = tcp_connect(http_addr, t->tht_iptv_port, errbuf, sizeof(errbuf), 10);
+
+    if(fd == -1) {
+      tvhlog(LOG_ERR, "IPTV", "\"%s\" cannot open socket", t->tht_identifier);
+      return -1;
+    }
+
+    sprintf(get_str, "GET %s HTTP/1.0\n\n", channel_url);
+
+    i = write(fd, get_str, strlen(get_str) + 1);
+    if (i < strlen(get_str)+1)
+    {
+      printf("Could not send GET req\n");
+      close(fd);
+      return -1;
+    }
+//    printf("Sending: %s (%" PRId64") -- %d\n", get_str, strlen(get_str), i);
+  }
+  else
+  {
   /* Now, open the real socket for UDP */
   if(t->tht_iptv_group.s_addr!=0) {
     fd = tvh_socket(AF_INET, SOCK_DGRAM, 0);
@@ -289,6 +344,8 @@
 	   "Can not icrease UDP receive buffer size to %d -- %s",
 	   resize, strerror(errno));
 
+  }
+
   memset(&ev, 0, sizeof(ev));
   ev.events = EPOLLIN;
   ev.data.fd = fd;
