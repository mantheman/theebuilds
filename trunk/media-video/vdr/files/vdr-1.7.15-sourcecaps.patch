--- Make.config.template.org	2010-07-01 11:58:53.850000070 -0400
+++ Make.config.template	2010-07-01 12:00:52.316000016 -0400
@@ -68,6 +68,7 @@
 #PINPLUGIN = 1
 #PLUGINMISSING = 1
 #ROTOR = 1
+#SOURCECAPS = 1
 #SETUP = 1
 #TIMERINFO = 1
 #TTXTSUBS = 1
@@ -173,6 +174,10 @@
 DEFINES += -DUSE_ROTOR
 endif
 
+ifdef SOURCECAPS
+DEFINES += -DUSE_SOURCECAPS   
+endif
+
 ifdef TIMERINFO
 DEFINES += -DUSE_TIMERINFO
 endif
--- config.c.org	2010-07-01 11:58:15.860000016 -0400
+++ config.c	2010-07-01 12:04:18.566000022 -0400
@@ -15,6 +15,9 @@
 #include "interface.h"
 #include "plugin.h"
 #include "recording.h"
+#ifdef USE_SOURCECAPS
+#include "sources.h"
+#endif /* SOURCECAPS */
 
 // IMPORTANT NOTE: in the 'sscanf()' calls there is a blank after the '%d'
 // format characters in order to allow any number of blanks after a numeric
@@ -425,6 +428,10 @@
   PauseLastMark = 0;
   ReloadMarks = 0;
 #endif /* JUMPPLAY */
+#ifdef USE_SOURCECAPS
+  memset(SourceCaps, 0, sizeof SourceCaps);
+  SourceCapsSet = false;
+#endif /* SOURCECAPS */
   CurrentChannel = -1;
   CurrentVolume = MAXVOLUME;
   CurrentDolby = 0;
@@ -586,6 +593,51 @@
   return true;
 }
 
+#ifdef USE_SOURCECAPS
+void cSetup::StoreSourceCaps(const char *Name)
+{
+  cSetupLine *l;
+  while ((l = Get(Name)) != NULL)
+    Del(l);
+
+  for (int i = 0; i < MAXDEVICES; i++) {
+    char buffer[MAXSOURCECAPS*8]={0,}, *q = buffer;
+    int j = 0;
+    while (SourceCaps[i][j] && j < MAXSOURCECAPS) {
+      if (j==0)
+        q += snprintf(buffer, sizeof(buffer), "%i ", i+1);
+      q += snprintf(q, sizeof(buffer) - (q-buffer), "%s ", cSource::ToString(SourceCaps[i][j++]));
+    }
+    if (*buffer)
+      Store(Name, buffer, NULL, true);
+  }
+}
+
+bool cSetup::ParseSourceCaps(const char *Value)
+{
+  char *p;
+  int d = strtol(Value, &p, 10)-1, i = 0;
+  while (p < Value+strlen(Value)) {
+    if (*p==0) return true;
+    if (isblank(*p)) ++p;
+    if (isalpha(*p)) {
+      int source = cSource::FromString(p);
+      if (source != cSource::stNone) {
+        SourceCaps[d][i++] = source;
+        SourceCapsSet = true;
+        }
+      else
+        return false;
+      while (!isblank(*p) && *p)
+        ++p;
+      if (i>MAXSOURCECAPS)
+        return false;
+      }
+    }
+  return true;
+}
+#endif /* SOURCECAPS */
+
 bool cSetup::Parse(const char *Name, const char *Value)
 {
   if      (!strcasecmp(Name, "OSDLanguage"))       { strn0cpy(OSDLanguage, Value, sizeof(OSDLanguage)); I18nSetLocale(OSDLanguage); }
@@ -706,6 +758,9 @@
   else if (!strcasecmp(Name, "CurrentChannel"))      CurrentChannel     = atoi(Value);
   else if (!strcasecmp(Name, "CurrentVolume"))       CurrentVolume      = atoi(Value);
   else if (!strcasecmp(Name, "CurrentDolby"))        CurrentDolby       = atoi(Value);
+#ifdef USE_SOURCECAPS
+  else if (!strcasecmp(Name, "SourceCaps"))          return ParseSourceCaps(Value);
+#endif /* SOURCECAPS */
 #ifdef USE_CHANNELPROVIDE
   else if (!strcasecmp(Name, "LocalChannelProvide")) LocalChannelProvide = atoi(Value);
 #endif /* CHANNELPROVIDE */
@@ -899,6 +954,9 @@
   Store("PauseLastMark",      PauseLastMark);
   Store("ReloadMarks",        ReloadMarks);
 #endif /* JUMPPLAY */
+#ifdef USE_SOURCECAPS
+  if (SourceCapsSet) StoreSourceCaps("SourceCaps");
+#endif /* SOURCECAPS */
   Store("CurrentChannel",     CurrentChannel);
   Store("CurrentVolume",      CurrentVolume);
   Store("CurrentDolby",       CurrentDolby);
--- config.h.org	2010-07-01 11:58:18.692000012 -0400
+++ config.h	2010-07-01 12:05:34.457000046 -0400
@@ -68,6 +68,11 @@
 #define MINOSDHEIGHT  324
 #define MAXOSDHEIGHT 1200
 
+#ifdef USE_SOURCECAPS
+#define MAXDEVICES         16 // the maximum number of devices in the system
+#define MAXSOURCECAPS     128 // the maximum number of different sources per device
+#endif /* SOURCECAPS */
+
 #define MaxFileName 256
 #define MaxSkinName 16
 #define MaxThemeName 16
@@ -230,6 +235,10 @@
   void StoreLanguages(const char *Name, int *Values);
   bool ParseLanguages(const char *Value, int *Values);
   bool Parse(const char *Name, const char *Value);
+#ifdef USE_SOURCECAPS
+  void StoreSourceCaps(const char *Name);
+  bool ParseSourceCaps(const char *Value);
+#endif /* SOURCECAPS */
   cSetupLine *Get(const char *Name, const char *Plugin = NULL);
   void Store(const char *Name, const char *Value, const char *Plugin = NULL, bool AllowMultiple = false);
   void Store(const char *Name, int Value, const char *Plugin = NULL);
@@ -339,6 +348,10 @@
   int PauseLastMark;
   int ReloadMarks;
 #endif /* JUMPPLAY */
+#ifdef USE_SOURCECAPS
+  int SourceCaps[MAXDEVICES][MAXSOURCECAPS];
+  bool SourceCapsSet;
+#endif /* SOURCECAPS */
   int CurrentChannel;
   int CurrentVolume;
   int CurrentDolby;
--- device.c.org	2010-07-01 11:58:26.149000011 -0400
+++ device.c	2010-07-01 12:08:07.378000026 -0400
@@ -111,8 +111,16 @@
   for (int i = 0; i < MAXRECEIVERS; i++)
       receiver[i] = NULL;
 
+#ifdef USE_SOURCECAPS
+  if (numDevices < MAXDEVICES) {
+#else
   if (numDevices < MAXDEVICES)
+#endif /* SOURCECAPS */
      device[numDevices++] = this;
+#ifdef USE_SOURCECAPS
+     SetSourceCaps(cardIndex);
+     }
+#endif /* SOURCECAPS */
   else
      esyslog("ERROR: too many devices!");
 }
@@ -389,6 +397,18 @@
   camSlot = CamSlot;
 }
 
+#ifdef USE_SOURCECAPS
+void cDevice::SetSourceCaps(int Index)
+{
+  for (int d = 0; d < numDevices; d++) {
+      if (Index < 0 || Index == device[d]->CardIndex()) {
+         for (int i = 0; i < MAXSOURCECAPS; i++)
+             device[d]->sourceCaps[i] = Setup.SourceCaps[device[d]->CardIndex()][i];
+         }
+      }
+}
+#endif /* SOURCECAPS */
+
 void cDevice::Shutdown(void)
 {
   primaryDevice = NULL;
--- device.h.org	2010-07-01 11:58:29.062000017 -0400
+++ device.h	2010-07-01 12:10:33.545000022 -0400
@@ -162,6 +162,10 @@
   static void Shutdown(void);
          ///< Closes down all devices.
          ///< Must be called at the end of the program.
+#ifdef USE_SOURCECAPS
+  static void SetSourceCaps(int Index = -1);
+         ///< Sets the SourceCaps of the given device according to the Setup data.
+#endif /* SOURCECAPS */
 #ifdef USE_LNBSHARE
 public:
   static void SetLnbNr(void);
@@ -198,6 +202,9 @@
   static int nextCardIndex;
   int cardIndex;
 protected:
+#ifdef USE_SOURCECAPS
+  int sourceCaps[MAXSOURCECAPS];
+#endif /* SOURCECAPS */
   cDevice(void);
   virtual ~cDevice();
   virtual bool Ready(void);
--- dvbdevice.c.org	2010-07-01 11:58:37.527000008 -0400
+++ dvbdevice.c	2010-07-01 12:11:58.998000027 -0400
@@ -937,6 +937,15 @@
 bool cDvbDevice::ProvidesSource(int Source) const
 {
   int type = Source & cSource::st_Mask;
+#ifdef USE_SOURCECAPS
+  if (Setup.SourceCapsSet && type == cSource::stSat && (frontendType == SYS_DVBS || frontendType == SYS_DVBS2)) {
+     for (int i = 0; i < MAXSOURCECAPS; i++)
+         if (sourceCaps[i] == Source)
+            return true;
+     return false;
+     }
+  else
+#endif /* SOURCECAPS */
   return type == cSource::stNone
       || type == cSource::stAtsc  && (frontendType == SYS_ATSC)
       || type == cSource::stCable && (frontendType == SYS_DVBC_ANNEX_AC || frontendType == SYS_DVBC_ANNEX_B)
--- sources.c.org	2010-07-01 11:58:43.688000016 -0400
+++ sources.c	2010-07-01 12:12:58.687000029 -0400
@@ -62,7 +62,11 @@
            int pos = 0;
            bool dot = false;
            bool neg = false;
+#ifdef USE_SOURCECAPS
+     while (*++s && !isblank(*s)) {
+#else
            while (*++s) {
+#endif /* SOURCECAPS */
                  switch (*s) {
                    case '0' ... '9': pos *= 10;
                                      pos += *s - '0';
--- sources.h.org	2010-07-01 12:27:58.112000026 -0400
+++ sources.h	2010-07-01 12:28:08.352000028 -0400
@@ -11,6 +11,7 @@
 #define __SOURCES_H
 
 #include "config.h"
+#include <ctype.h>
 
 class cSource : public cListObject {
 public:

